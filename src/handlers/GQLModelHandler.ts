import { AbstractCollectionHandler, CollectionItem, AppManager } from "@nodeknit/app-manager";
import { getGQLModelMetadata, getGQLFields } from '../decorators/index';
import { AppGraphQL } from '../AppGraphQLMain.js';

export class GQLModelHandler extends AbstractCollectionHandler {
    private graphqlApp: AppGraphQL;

    constructor(graphqlApp: AppGraphQL) {
        super();
        this.graphqlApp = graphqlApp;
    }

    async process(appManager: AppManager, collectionItems: CollectionItem[]): Promise<void> {
        console.log(`üîç Processing ${collectionItems.length} GQL models from collections...`);

        for (const collectionItem of collectionItems) {
            const model = collectionItem.item;

            if (!model || !model.prototype) {
                console.warn(`‚ö†Ô∏è  Invalid model in collection: ${collectionItem.appId}`);
                continue;
            }

            // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∏–∑ –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤
            const modelMetadata = getGQLModelMetadata(model);
            const fieldsMetadata = getGQLFields(model);

            if (modelMetadata && !modelMetadata.exclude) {
                console.log(`   ‚úÖ Registering GQL model: ${model.name} from app: ${collectionItem.appId}`);

                // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ GraphQL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
                if (this.graphqlApp && typeof this.graphqlApp.addModel === 'function') {
                    this.graphqlApp.addModel(model);
                    console.log(`   üì° Model added to GraphQL schema`);
                } else {
                    console.warn(`   ‚ö†Ô∏è  GraphQL app not available or addModel method not found`);
                }
            } else {
                console.log(`   ‚è≠Ô∏è  Skipping model ${model.name} (no GQL metadata or excluded)`);
            }
        }
    }

    async unprocess(appManager: AppManager, collectionItems: CollectionItem[]): Promise<void> {
        console.log('üßπ Cleaning up GQL model collection');

        for (const collectionItem of collectionItems) {
            const model = collectionItem.item;
            console.log(`   üóëÔ∏è  Removing GQL model: ${model.name}`);

            // –£–¥–∞–ª—è–µ–º –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ GraphQL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            if (this.graphqlApp && typeof this.graphqlApp.removeModel === 'function') {
                this.graphqlApp.removeModel(model.name);
            }
        }
    }
}
